#+TITLE: Solutions
#+startup: content
#+options: header-args:asm :tangle no

Consultar também: http://ref.x86asm.net/index.html
E também: http://ref.x86asm.net/coder-abc.html
E também: https://web.itu.edu.tr/kesgin/mul06/intel/index.html

[[https://wiki.cdot.senecacollege.ca/wiki/X86_64_Register_and_Instruction_Quick_Start][Guia rápido dos registradores]].

E o [[https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/hb/nios2/n2cpu_nii51017.pdf][Instruction Set Reference]]. Que também pode ser encontrado [[https://www.felixcloutier.com/x86/][aqui]].

Aqui tem um [[https://www.omnicalculator.com/math/twos-complement][site para calcular  complemento de dois]] com alguns números
específicos de bits.

[[https://www.cs.uaf.edu/2017/fall/cs301/reference/x86_64.html][NASM Cheat Sheet]] para consulta rápida.

* Debug

Antes de mais  nada, lembre-se de *executar apenas código  no qual você
confia*.

*Não me responsabilizo se algo aqui causar danos ao seu computador.*

Para debugar, recomendo usar o próprio programa ~GDB~, através do editor
Emacs, que tem um modo só para  isso e permite ver as variáveis locais
e registradores através de ~gdb-display-locals-buffer~.

Caso você não use Emacs, use o programa ~DDD~ em conjunto com ~GDB~.

Meu assembler favorito é ~nasm~, então também o recomendo.

Vou adicionar um Makefile que ajuda com isso.

#+begin_src makefile :tangle Makefile
SRC := $(wildcard *.asm)
BIN := $(SRC:%.asm=%.out)

.PHONY: clear

all: $(BIN)

%.out: %.o
	ld -m elf_x86_64 $^ -o $@

%.o: %.asm
	nasm -felf64 -Fdwarf $^ -o $@

clear:
	rm -f *.o *.out
#+end_src

Ao início, é interessante adicionar o seguinte:

#+name: asm_prelude
#+begin_src asm :tangle no
	global	_start
	section	.text
_start:
#+end_src

* 0x00

#+name: 0x00
#+begin_src asm
	xor	eax,eax	; 1. eax <- zero, já que X xor X = 0
	lea	rbx,[0]	; 2. rbx <- endereço de memória 0
	loop	$	; 3. rcx <- rcx - 1. Se rcx <> 0, JMP para
			; instrução atual. Em outras palavras,
			; loop decrementando rcx até que rcx = 0
	mov	rdx,0	; 4. rdx <- 0, sem surpresas
	and	esi,0	; 5. esi <- 0, já que X and 0 = 0
	sub	edi,edi	; 6. edi <- 0, já que X - X = 0
	push	0	; 7. Dá push em 0 na pilha...
	pop	rbp	; ...e dá pop no 0 que está no topo da
			; pilha, diretamente para rbp.
#+end_src

O algoritmo  acima mostra várias  formas de zerar  registradores, mais
especificamente zerando ~eax~, ~rbx~, ~rcx~, ~rdx~, ~esi~, ~edi~ e ~rbp~.

Interessante notar  algumas coisas  aqui, como o  fato de  definir ~eax~
automaticamente  zera  os  outros   32  bits  mais  significativos  de
~rax~.  Isso ocorre  por uma  questão de  evitar interdependência  entre
execução de  programas nos  modos 32 e  64 bits,  especialmente quando
concorrência  e paralelismo  forem importantes.

Também garante certo aumento de  velocidade por não precisar "mesclar"
o valor anterior  do registrador com o valor  atual (imagine modificar
~rax~ e modificar ~eax~ logo após), em especial porque a noção desses dois
registradores como uma entidade  no processador físico é *virtualizada*,
da mesma forma como opcodes na realidade se traduzem em microcódigo.

Para maiores informações, veja [[https://stackoverflow.com/a/25456097][esta resposta do StackOverflow]].

** Notas

Em   geral,  registradores   começados  com   E  são   registradores
extendidos  (32 bits).   Os  começados com  R  são similares,  porém
usados em contextos de 64 bits.

#+begin_example
0x1122334455667788
  ================ rax (64 bits)
          ======== eax (32 bits)
              ====  ax (16 bits)
              ==    ah (8 bits)
                ==  al (8 bits)
#+end_example

- ~[X]~: local apontado por ~X~.
- ~XOR A,B~: ~A <- A ^ B~
- ~LEA A,[B]~:  Parece ~MOV~, mas ~A  <- B~. Comparativamente, ~MOV~  faz ~A <-
  *[B]~.
- ~RCX~: Geralmente usado como contador/índice mesmo.
- ~EDX~: Geralmente usado  como auxiliar e como extensor  de precisão de
  ~EAX~.  Por  exemplo, um  número  grande  pode ser  armazenado  usando
  ~EDX:EAX~.
- ~LOOP LABEL~: Decrementa ~RCX~. Se ~RCX~ não for igual a zero, dá ~JMP~ para
  ~LABEL~.
- ~ESI~: Source  Index (extendido). Registrador  não-volátil normalmente
  usado   para  armazenar   ponteiros.  Aponta   para  a   "fonte",  o
  "início". Imagine armazenar o endereço  de uma string que está sendo
  copiada para a memória.
- ~EDI~:  Destination  Index  (extendido). Complementa  ~ESI~;  imagine  o
  endereço para onde a string está sendo copiada na memória.
- ~RBP~: Ponteiro base para a pilha (64 bits).

* 0x01

#+name: 0x01
#+begin_src asm
.loop:
	xadd	rax,rdx ; temp <- rax + rdx, rdx <- rax, rax <- temp
	loop	.loop	; Itera decrementando rcx até rcx = 0
#+end_src

Este é  o algoritmo  para calcular  o N-ésimo  número da  sequência de
Fibonacci, de forma iterativa.

O algoritmo usa ~rax~ como resultado atual, e ~rdx~ como acumulador para o
resultado anterior. ~rcx~ determina o valor de N.

** Notas

O prelúdio  a seguir  fará com  que o valor  remanescente ao  final da
execução, em ~rax~, seja ~8~:

#+begin_src asm :tangle 01.asm :noweb yes
<<asm_prelude>>
	mov	rax,1
	mov	rdx,0
	mov	rcx,5
<<0x01>>
#+end_src

Isso faz com que iniciemos a sequência ~0~,  ~1~, ~1~, ~2~, ~3~, ~5~, ~8~, tal que a
contagem se inicie a partir do primeiro ~1~.

Recomenda-se iniciar com  o seguinte prelúdio para  termos a sequência
de Lucas ao invés de Fibonacci:

#+begin_src asm
	mov	rax,2
	mov	rdx,1
	mov	rcx,N ; trocar N pelo número designado
#+end_src

* 0x02

#+name: 0x02
#+begin_src asm
	neg	rax	; cf = (rax == 0) ? 0 : 1. Nega o valor de rax.
	sbb	rax,rax	; rax <- (cf == 1) ? -1 : 0
	neg	rax	; veja acima
#+end_src

O código  toma o valor  de ~rax~ e, com  base em operações  envolvendo a
/carry flag/ do registrador, define ~rax~ como ~1~ se seu valor anterior era
diferente de zero. Caso contrário, define ~rax~ como ~0~.

** Notas

- ~sbb dest,src~  => "Integer subtraction  with borrow". ~dest <-  dest -
  (src + cf)~.
- O primeiro  ~neg~ define a  /carry flag/ de  ~rax~ como ~0~  se ~rax =  0~. Do
  contrário, a /carry flag/ recebe ~1~. Além disso, claro, alterna o sinal
  do valor em ~rax~.
- A segunda instrução define ~rax~ como ~-1~  se a /carry flag/ é igual a ~1~;
  do contrário, define ~rax~ como ~0~.
- O segundo  ~neg~ modifica a /carry  flag/ como apontado acima,  mas aqui
  tem o papel de inverter o sinal de ~rax~ quando ~rax = -1~.

Em teoria, a segunda e a terceira instruções poderiam ser substituídas
por ~jnc~ se  a intenção é realizar /branching/ em  seguida -- por exemplo,
imagine a situação de um /jmp/ caso ~rax~ seja igual a zero:

#+begin_src asm
	neg	rax		; Código original
	sbb	rax,rax		;
	neg	rax		;
	test	rax,rax		; zf = (rax == 0) ? 1 : 0
	jz	algum_label	; pula para algum_label se zf == 1
#+end_src

Código equivalente:

#+begin_src asm
	neg	rax
	jnc	algum_label
#+end_src

- ~jnc label~ => "Jump if not carry". /jmp/ para ~label~ se ~cf~ é igual a ~0~.
- ~test  a,b~ =>  "Logical compare".  Realiza AND  lógico entre  ~a~ e  ~b~;
  descarta  o resultado;  define as  flags  ~sf~, ~zf~  e  ~pf~ com  ~1~ ou  ~0~
  dependendo do resultado.

* 0x03

#+name: 0x03
#+begin_src asm
	sub	rdx,rax	; rdx <- rdx - rax.
			;     cf <- Se rax > rdx, 1. Senão, 0.
	sbb	rcx,rcx	; rcx <- Se cf = 0, 0. Senão, -1
	and	rcx,rdx	; rcx <- Se rcx = 0, 0. Senão, rdx
	add	rax,rcx	; rax <- rax + rcx
#+end_src

O  código  compara   e  retorna  o  menor  valor  entre   ~rdx~  e  ~rax~,
armazenando-o em ~rax~ ao  final. Funciona especificamente entre valores
/unsigned/.

** Notas

- Em ~sub a,b~, ~cf <- 1~ se e somente se ~unsigned(b) > unsigned(a)~.
  Isso é conhecido  como um /borrow/ (tomar emprestado), como  se faz em
  uma  operação de  subtração. Em  geral  isso não  demonstra nada  em
  especial numa  subtração de números  com sinal, mas indica  erros em
  operações com valores /unsigned/.
- Se  valores negativos  forem  atribuídos  a ~rdx~  ou  a ~rax~,  deve-se
  considerar  sua  representação  binária  como  complemento  de  dois
  -- =~(x  - 0b1)=  --,  o  que se  tornará  um número  exorbitantemente
  grande.
- O  uso de  ~sbb~  é similar  ao desafio  anterior,  onde utiliza-se  a
  instrução com um mesmo registrador  para armazenar o oposto da /carry
  flag/.  Nesse caso,  o valor  (~-1~  ou ~0~)  serve como  uma espécie  de
  "seletor" do valor armazenado em ~rdx~;  como o complemento de dois de
  ~-1~ é uma máscara onde todos os  bits são ~1~, ~and rcx,rdx~ fará com que
  o valor de ~rdx~  seja armazenado em ~rcx~ sem necessidade  de um ~mov~ ou
  uma comparação extra. Caso contrário, um valor ~0~ em ~rcx~ fará com que
  o ~and~ retorne zeros em todos os bits, efetivamente colocando o valor
  ~0~ em ~rcx~.
  
* 0x04

#+name: 0x04
#+begin_src asm
	xor	al,0x20
#+end_src

O algoritmo alterna  o sexto bit de  ~al~ (contando de LSB  como sendo o
primeiro, da direita para a esquerda). Consequentemente, isso equivale
a somar ou subtrair o valor ~32~ do número representado por ~al~.

** Notas

- ~0x20~ = ~32~ = ~0010 0000~

* 0x05

#+name: 0x05
#+begin_src asm
	sub	rax,5
	cmp	rax,4
#+end_src

Subtrai ~5~ de ~rax~, armazenando o resultado em ~rax~, e em seguida compara
se  ~rax~  é  igual a  ~4~.  Em  suma,  compara  se  ~rax~ era  igual  a  ~9~,
originalmente.

Acredito  que o  propósito  aqui seja  demonstrar,  através de  estudo
aprofundado,  que  em essência,  ~sub~  e  ~cmp~  realizam a  exata  mesma
operação, subtraindo o segundo operando do primeiro e definindo ~EFLAGS~
de acordo com o resultado.

Todavia,  ~cmp~   não  modifica   seu  primeiro  operando   (~rax~,  nesse
caso). Dessa forma, a única saída de relevância na execução de ~cmp~ é a
flag ~zf~.

** Notas

#+begin_src asm :tangle 05.asm :noweb yes
<<asm_prelude>>
	mov	rax,9
<<0x05>>
	mov	rax,9
	sub	rax,5
	sub	rax,4
#+end_src

- ~cmp~  realiza uma  operação similar  a ~sub~,  porém, não  modifica seu
  primeiro  operando.  A  comparação portanto  realiza  uma  subtração
  ~op1 -  op2~, definindo ~EFLAGS~ como  ~sub~ o faria. Nesse  caso, a saída
  mais importante  de ~cmp~  está na flag  ~ZF~, ativa se  e somente  se o
  resultado da operação for igual a zero.
- ~sub~ também define ~eflags~, da mesma  forma como ~cmp~ faz. Assim, ~cmp~ é
  definitivamente  uma especialização  de ~sub~  que não  altera um  dos
  operandos, podendo ser mais rápido dependendo de tais operandos.
  
* 0x06

#+name: 0x06
#+begin_src asm
	not	rax	; Bitwise NOT
	inc	rax 	; Incrementa
	neg	rax	; Nega
#+end_src

Esse código apenas mostra como  números /signed/ são, na verdade, apenas
números  /unsigned/ interpretados  levando  em consideração  a regra  do
complemento de dois para números negativos. ~not~ e ~inc~ realizam o exato
mesmo comportamento de  ~neg~ que, executado em seguida,  retorna ~rax~ ao
seu valor inicial.

Em geral, o complemento de dois  de um número corresponde a realizar o
complemento de  um do mesmo número  (~not~), e então somar  um (~inc~). Em
outras palavras, a combinação das instruções  ~not~ e ~inc~ levam ao mesmo
comportamento  de ~neg~;  o  ~neg~  ao final  apenas  calcula novamente  o
complemento de dois de ~rax~.

** Notas

|---------+-------+--------------+---------|
| opcode  | sinal | magnitude    | decimal |
|---------+-------+--------------+---------|
| inicial |     0 | 000 0010     |      +2 |
|---------+-------+--------------+---------|
| ~not~     |     1 | 111 1101     |      -3 |
|---------+-------+--------------+---------|
| ~inc~     |     1 | 111 1110     |      -2 |
|---------+-------+--------------+---------|
| ~neg~     |     0 | 000 0001 + 1 |         |
|         |     0 | 000 0010     |      +2 |
|---------+-------+--------------+---------|

Exemplo debugável:

#+begin_src asm :tangle 06.asm :noweb yes
<<asm_prelude>>
	mov	rax,9
<<0x06>>
#+end_src

- ~inc~ de fato incrementa um número,  mas isso deve ser considerado com
  certa crítica: como números inteiros com sinal, em computadores, são
  armazenados através de  complemento de dois, em  teoria, não existem
  números com sinal, muito menos números negativos. Isso significa que
  ~inc~ realiza um incremento em  um número necessariamente /unsigned/, no
  fim das contas.
- A instrução  ~set $rax =  X~ do  GDB me ajudou  aqui a perceber  o que
  estava acontecendo.

* 0x07

#+begin_src asm
	inc	rax
	neg	rax
	inc	rax
	neg	rax
#+end_src

Deixa ~rax~ em seu estado inicial. Em algum ponto, uma das operações ~inc~
ocorre  sobre  um número  negativo;  recordando  de 0x06  que  números
inteiros com sinal são armazenados  como complementos de dois, podemos
lembrar  que  incrementar  um   número  negativo  "decrementa"  a  sua
magnitude. O restante do raciocínio é suficientemente óbvio.

* 0x08

#+name: 0x08
#+begin_src asm
	add	rax,rdx
	rcr	rax,1	; rotaciona rax + carry como LSB p/ a direita
#+end_src

O  algoritmo  acima realiza  a  média  aritmética entre  dois  números
/signed/  através  de  divisão  inteira.  O  algoritmo  também  leva  em
consideração  situações  onde  a  soma  possa  gerar  overflow  /signed/
(/carry/).

** Notas

- A instrução  ~add~ é capaz de  modificar as flags  ~cf~ e ~of~. ~cf~  é útil
  para  indicar overflow  em  operações /signed/  (/carry/),  e ~of~  indica
  overflow em operações /unsigned/.
- A  instrução ~rcr~  funciona  como a  função diádica  ~⌽~  de APL  (mais
  especificamente   uma  função   como  ~{¯1⌽⍵}~),   porém  levando   em
  consideração a flag  ~cf~, de forma que uma rotação  usando ~rcr~ faça o
  valor de ~cf~ se tornar o  MSB, e o LSB anterior será subsequentemente
  colocado em ~cf~.

Assembly para testes:

#+begin_src asm :tangle 08.asm :noweb yes
<<asm_prelude>>
	; menor inteiro negativo - 1
	mov	rax,-9223372036854775808
	mov	rdx,-1	; rdx = -1
<<0x08>>
	
	; maior inteiro positivo + 1
	mov	rax,9223372036854775807
	mov	rdx,1	; rdx = 1
<<0x08>>
	int	0x80
#+end_src

Abaixo, alguns scripts em C  para imprimir valores de registradores em
números decimais.

Menor negativo - 1:

#+begin_src C :results table :cache yes :exports results
signed long long rax = 0x8000000000000000;
signed long long rdx = 0xffffffffffffffff;
signed long long result = 0xbfffffffffffffff;
printf("rax    %ld\nrdx    %ld\nresult %ld\n", rax, rdx, result);
#+end_src

#+RESULTS[b31328a51b8b02987d24f814484c98abaf008301]:
| rax    | -9223372036854775808 |
| rdx    |                   -1 |
| result | -4611686018427387905 |


Menor negativo - 5:

#+begin_src C :results table :cache yes :exports results
signed long long rax = 0x8000000000000000;
signed long long rdx = -5;
signed long long result = 0xbffffffffffffffd;
printf("rax    %ld\nrdx    %ld\nresult %ld\n", rax, rdx, result);
#+end_src

#+RESULTS[ee0ca1f104eb63a0cfc2ab3a2e41c3876000071e]:
| rax    | -9223372036854775808 |
| rdx    |                   -5 |
| result | -4611686018427387907 |

Maior positivo + 1:

#+begin_src C :results table :cache yes :exports results
signed long long rax = 0x7fffffffffffffff;
signed long long rdx = 0x1;
signed long long result = 0x4000000000000000;
printf("rax    %ld\nrdx    %ld\nresult %ld\n", rax, rdx, result);
#+end_src

#+RESULTS[8ac0ce4feb5fd06788a7965fde7be1636a5eb395]:
| rax    | 9223372036854775807 |
| rdx    |                   1 |
| result | 4611686018427387904 |

Maior positivo + 5:

#+begin_src C :results table :cache yes :exports results
signed long long rax = 0x7fffffffffffffff;
signed long long rdx = 5;
signed long long result = 0x4000000000000002;
printf("rax    %ld\nrdx    %ld\nresult %ld\n", rax, rdx, result);
#+end_src

#+RESULTS[f0e2abd619d2e258df7e00089d319c96ae3dd111]:
| rax    | 9223372036854775807 |
| rdx    |                   5 |
| result | 4611686018427387906 |

* 0x09

#+begin_src asm
	shr	rax,3	; Shift lógico para a direita, 3 bits
	adc	rax,0	; Soma envolvendo carry flag
#+end_src

O    algoritmo    acima    realiza    uma   divisão    por    8    com
arredondamento. Realizar  ~shr~ com  3 bits equivale  a uma  divisão por
2³.

A instrução ~adc~, por fim, soma o valor do /carry/ contido em ~cf~, que foi
ali colocado por ~shr~, o que possibilita um algoritmo de arredondamento
(se a parte decimal for maior  ou igual a 0.5, adiciona-se uma unidade
à parte inteira).

O mais  interessante desse algoritmo é  que, por mais que  a definição
matemática  do  arredondamento derive  de  uma  análise de  sua  parte
decimal, em nenhum momento pontos flutuantes são tocados.

** Notas

- ~shr~ faz  shift binário  para a  direita (~>>~  em C),  e o  último bit
  "shift-ado" é colocado em ~cf~. No caso acima, o terceiro bit (contado
  a partir do LSB) é colocado em  ~cf~, e são adicionados mais três bits
  vazios à esquerda do número.
- Isso significa que  ~shr~ aqui (quando analisado  sozinho) realiza uma
  divisão inteira por 8, truncando o resultado.

| rax | resultado |
|-----+-----------|
|   5 |         1 |
|   0 |         0 |
|  94 |        12 |
| 255 |        32 |
|  18 |         2 |

* 0x0a

#+name: 0x0a
#+begin_src asm
	add	byte [rdi],1	; adic. 1 ao byte menos signif. de [rdi]
.loop:
	inc	rdi		; incrementa rdi
	adc	byte [rdi],0	; adic. carry flag ao byte menos sign. de [rdi]
	loop	.loop		; se rcx <> 0, vá para .loop
#+end_src

Este código incrementa um  número arbitrariamente longo, cujo endereço
esteja descrito no registrador ~rdi~.

Pelas regras  do NASM,  ~rdi~ é  o primeiro  argumento passado  para uma
função.  Isso significa  que tomaremos  ~rdi~ como  um ponteiro  para um
número  de  tamanho  arbitrário  e,  baseando-se  em  uma  máquina  de
endianness /little  endian/, incrementa-se ~rdi~ enquanto  a quantidade de
bytes do número (ditada inicialmente por ~rcx~, não-presente no snippet)
não for exaurida.

** Notas

Em NASM/Linux 64-bit, ~rdi~ é o registrador usado para passar o primeiro
argumento de  uma função,  o que  significa que  provavelmente estamos
lidando com uma chamada de função aqui.

A  diretiva de  tamanho  ~byte~ (similar  a ~word~,  ~dword~,  ~qword~) é  uma
diretiva   que  indica   qual   porção  do   registrador  está   sendo
lida/modificada. Na maior  parte do tempo, isso  é dedutível (exemplo,
~mov al,[p]~ equivale a ~mov al,byte [p]~).  Todavia, especialmente quando
estamos falando a  respeito de modificar um registrador  (como no caso
de 0x0a, onde  um número arbitrário é intencionalmente  colocado em um
byte específico de um registrador), isso não é opcional.

Na notação do assembler NASM, ~byte  [p]~ equivale a ~byte ptr [p]~. Seria
interessante  usar  a  segunda   por  uma  questão  de  portabilidade,
imagino.

A seguir temos um exemplo em C  para uso do algoritmo. O algoritmo foi
declarado como função  em assembly, e identificado por  seu label como
sendo uma função  ~extern~. Outra coisa interessante  é que determinamos
que aqui  o argumento passado  será um ponteiro  para um número  de 64
bits.

#+begin_src C :main no :tangle 0a_example.c
#include <stdio.h>

extern void myfunction(long long int*);

int
main(void)
{
    long long int a = 5;
    long long int b = 6;
    long long int c = 900;

    printf("a = %lld\nb = %lld\nc = %lld\n", a, b, c);
    
    myfunction(&a);
    myfunction(&b);
    myfunction(&c);

    printf("a = %lld\nb = %lld\nc = %lld\n", a, b, c);
    
    return 0;
}
#+end_src

No arquivo de  assembly, primeiro determinamos em ~rcx~ que  se trata de
um número de  64 bits (8 bytes). Em seguida,  executamos o código como
proposto no livro.

Também damos um  /label/ ao snippet e declaramos este  /label/ como ~global~
para que seja visível para o  linker. Finalmente, ao final da execução
da  função, executamos  ~ret~ para  contrabalancear a  chamada implícita
deste label que C faz através da instrução ~call~.

#+begin_src asm :tangle 0a.S :noweb yes
	global myfunction

myfunction:
	mov	rcx,8	; 64 bits = 8 bytes
<<0x0a>>
	ret
#+end_src

Para  compilar, basta  gerar  o arquivo  ~*.o~ a  partir  do arquivo  de
assembly, usando  o ~nasm~. Em seguida,  compilamos o arquivo C  para um
arquivo ~*.o~, e geramos ~0a.out~ usando o próprio GCC como linker.

#+begin_src bash :tangle 0a_compile.sh
#!/bin/bash
nasm -felf64 -Fdwarf 0a.S -o 0a.o
gcc -g -c 0a_example.c -o 0a_example.o
gcc -g 0a_example.o 0a.o -o 0a.out
#+end_src

A execução revelou  o resultado esperado, e inclusive  o assembly pode
ser debuggado cuidadosamente através do GDB, para maiores informações.

* 0x0b

#+name: 0x0b
#+begin_src asm
	not	rdx
	neg	rax
	sbb	rdx,-1
#+end_src

O  algoritmo  decide  se  ~rdx~  será  transformado  em  algum  de  seus
complementos.

Caso ~rax~ seja igual a 0, ~rdx~ receberá seu próprio complemento de dois;
caso ~rax~ seja diferente de zero, ~rdx~ receberá seu complemento de um.

Em outras palavras,  o valor de ~rax~ seleciona se  ~rdx~ será submetido a
uma operação similar a ~neg~ ou ~not~, respectivamente.

** Notas

É importante lembrar que a instrução ~neg~ define ~cf~ como ~1~ se e somente
se  o operando  de  ~neg~ for  diferente  de zero.  Do  contrário, ~cf~  é
definido como zero.

Ademais, ~sbb~  é uma  subtração envolvendo  a flag  de /borrow/  (~cf~, que
também é a flag de /carry/):

~sbb a,b => a <- a - (b + cf)~

Dessa forma, caso ~cf~  seja igual a ~1~ (quando ~rax~ é  igual a zero antes
da  execução  de  ~neg~),  o  valor   ~-1~  será  anulado  e  ~rdx~  sofrerá
alterações. Caso contrário,  o valor ~1~ acaba sendo somado  a ~rdx~, pela
aplicação da fórmula.

Como visto  em ~0x06~, aplicar  ~not~ e ~inc~  em um registrador  equivale a
aplicar  ~neg~ no  mesmo,  o que  configura o  complemento  de dois.  Do
contrário,  aplicar apenas  ~not~ configura  o complemento  de um,  como
esperado.

* 0x0c

#+name: 0x0c
#+begin_src asm
	mov	rcx,rax
	xor	rcx,rbx
	ror	rcx,0xd

	ror	rax,0xd
	ror	rbx,0xd
	xor	rax,rbx

	cmp	rax,rcx
#+end_src

** Raciocínio

Ambos os blocos chegam ao mesmo resultado.

** Notas

A  instrução  ~ror  reg,n~  (/rotate  right/)  rotaciona  os  bits  do
registrador  ~reg~,  ~n~ bits  para  a  direita,  de forma  similar  a
~shr~.  Todavia,   os  bits  menos  significativos   "perdidos"  serão
colocados na parte mais significativa do número.

#+begin_src asm :tangle 0c.asm :noweb yes
<<asm_prelude>>
	mov	rax,1
	mov	rbx,3
<<0x0c>>
	int	0x80
#+end_src

